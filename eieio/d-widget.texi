@c -*-texinfo-*-
@c
@c $Id$
@c

@c The next line is for the back-search to see what node this one
@c resides in.

@c @node Widget Classes,
@c @chapter Widget Classes

@c This command is a convenience to help rebuild this file.  Use C-x C-e
@c on the expression below to rebuild the entire widget index (but only
@c after loading in the dialog tool.)

@c (eieiodoc-class widget-core "cw")

@menu
* widget-core ::
*  widget-gadget-translator ::
*  widget-visual ::
*   widget-square ::
*    widget-group ::
*     widget-toplevel ::
*     widget-frame ::
*      widget-radio-frame ::
*     widget-labeled-text ::
*    widget-label ::
*     widget-button ::
*      widget-push-button ::
*      widget-option-button ::
*      widget-toggle-button ::
*       widget-radio-button ::
*    widget-scale ::
*     widget-scrollbar ::
*    widget-text-field ::
@end menu


@node widget-core, widget-gadget-translator,  , Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-core
@cwindex widget-core

@table @asis
@item Inheritance Tree:
@table @code
@item widget-core
@table @asis
@item Children:
@w{@xref{widget-gadget-translator}}, @w{@xref{widget-visual}}
@end table

@end table
@end table

  Class for core widget.  This is the widget all other widgets are 
based from.

@table @asis
@item Public Slots:

@table @code
@item :parent
Default Value: @code{nil}

A widget of type @code{widget-group} @xref{widget-group} of which this is a child.
@refill

@end table

@item Private Slots:

@table @code
@item :managed
Default Value: @code{nil}

(unused) @code{t} if this widget is active.
@refill

@item :watched-symbols
Default Value: @code{nil}

List of symbols this widget cares about.
@refill

@end table

@end table

@node widget-gadget-translator, widget-visual, widget-core, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-gadget-translator
@cwindex widget-gadget-translator

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item widget-gadget-translator
No children
@end table

@end table
@end table

  Non-visible class for a gadget translator.  The translator's job is
to convert the @code{data-object} @xref{data-object} in @code{watch} to some new value, and store it
in @code{change}.  This is useful for translating indices into descriptions
or something like that.

@table @asis
@item Public Slots:

@table @code
@item :watch
Default Value: @code{nil}

A @code{data-object} @xref{data-object} to watch.  When it changes, run the translator function.
@refill

@item :change
Default Value: @code{nil}

A @code{data-object} @xref{data-object} to change whenever @code{watch} is modified.
@refill

@item :translate-function
Default Value: @code{(lambda-default (watch change) nil)}

Function to call when @code{watch} changes.  It should modify the @code{data-object} @xref{data-object}
@code{change} from it's value.  It takes two parameters WATCH and CHANGE.
@refill

@end table

@end table

@node widget-visual, widget-square, widget-gadget-translator, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-visual
@cwindex widget-visual

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item widget-visual
@table @asis
@item Children:
@w{@xref{widget-square}}
@end table

@end table

@end table
@end table

  Class for visual widget.  This is the widget all visible widgets
are derived from. Its definition includes an X,Y position which
defines it's offset inside the parent, and can include its offset from
other widgets which are children of @code{parent}.
@xref{(dialog) Geometry Management}

@table @asis
@item Public Slots:

@table @code
@item :x
Default Value: @code{nil}

The X position in a buffer relative to parent.
@refill

@item :y
Default Value: @code{nil}

The Y position in a buffer relative to parent.
@refill

@item :resizeable
Default Value: @code{nil}

(unused) @code{t} if this widget has a tendency to resize itself.
@refill

@item :handle-io
Default Value: @code{nil}

@code{t} if this widget accepts keyboard or mouse input.
@refill

@end table

@item Private Slots:

@table @code
@item :marker
Default Value: @code{nil}

(Unused) Marker in the dialog buffer from which all drawing commands are based.
@refill

@item :face
Default Value: @code{nil}

Face used to draw this widget.
@refill

@end table

@end table

@node widget-square, widget-group, widget-visual, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-square
@cwindex widget-square

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item widget-square
@table @asis
@item Children:
@w{@xref{widget-group}}, @w{@xref{widget-label}}, @w{@xref{widget-scale}}, @w{@xref{widget-text-field}}
@end table

@end table

@end table

@end table
@end table

  This is the definition for visible widgets which have a square
shape.  This provides basic sizing schemes and box drawing utilities
for widgets that are square.

@table @asis
@item Public Slots:

@table @code
@item :width
Default Value: @code{nil}

Width in characters
@refill

@item :height
Default Value: @code{nil}

Height in characters
@refill

@item :boxed
Default Value: @code{nil}

@code{t} if a box is to be drawn around this widget
@refill

@item :box-sides
Default Value: @code{[t t t t]}

Vector which represents those sides of the
box which will be drawn, where a @code{t} in a position indicates the side is
to be drawn.  The vector is of the form @code{[ left right top bottom ]}
@refill

@end table

@item Private Slots:

@table @code
@item :box-face
Default Value: @code{nil}

Face used on the box (if drawn)
@refill

@item :box-char
Default Value: @code{nil}

Character set used the draw the box.  The vector is 
@code{[ upper-right upper-left bottom-right bottom-left horizontal vertical ]}
@refill

@end table

@end table

@node widget-group, widget-toplevel, widget-square, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-group
@cwindex widget-group

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item widget-group
@table @asis
@item Children:
@w{@xref{widget-toplevel}}, @w{@xref{widget-frame}}, @w{@xref{widget-labeled-text}}
@end table

@end table

@end table

@end table

@end table
@end table

  Definition for the group widget.  This is an intermediary type
whose job is to provide basic child management for higher level
widgets which contain children such as @code{widget-toplevel} @xref{widget-toplevel} and
@code{widget-frame} @xref{widget-frame}.  This widget knows how to add new children, and manage
its size based on the positions and sizes of it's children.  It also
knows how to create navigation lists.

@table @asis
@item Public Slots:

@table @code
@item :child-list
Default Value: @code{nil}

List of children this group needs to manage
@refill

@end table

@end table

@node widget-toplevel, widget-frame, widget-group, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-toplevel
@cwindex widget-toplevel

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item @w{@xref{widget-group}}
@table @code
@item widget-toplevel
No children
@end table

@end table

@end table

@end table

@end table
@end table

  Definition for a top-level shell. This maintains the interface to
emacs' buffer, and is a parent of all children displayed in the
buffer.  This will be created automatically with a call to
@dfn{dialog-mode} when designing a screen.

@table @asis
@item Public Slots:

@table @code
@item :handle-io
Default Value: @code{t}

@xref{widget-group}
@item :buffer
Default Value: @code{current-buffer}

The buffer this dialog resides in.
@refill

@end table

@end table

@node widget-frame, widget-radio-frame, widget-toplevel, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-frame
@cwindex widget-frame

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item @w{@xref{widget-group}}
@table @code
@item widget-frame
@table @asis
@item Children:
@w{@xref{widget-radio-frame}}
@end table

@end table

@end table

@end table

@end table

@end table
@end table

  Definition for a frame, which can contain several children grouped
in a box with a @code{widget-label} @xref{widget-label} on one edge (covering a part of the box).

@table @asis
@item Public Slots:

@table @code
@item :handle-io
Default Value: @code{t}

@xref{widget-group}
@item :boxed
Default Value: @code{t}

@xref{widget-group}
@end table

@item Private Slots:

@table @code
@item :frame-label
Default Value: @code{nil}

Label to place on the edge of our frame.  An initial value of @code{t} means
to use the object name.  An initial value of @code{nil} means no title.  If
this is initialized with a string, then that string is used as the
label's string.  The created widget will be a @code{widget-label} @xref{widget-label}.  If this
is a widget, then that widget is positioned on the edge of the
screen.
@refill

@item :position
Default Value: @code{nil}

Where the @code{frame-label} will reside.  Valid values are symbols
consisting of substrings of left, right, center, top, and bottom.
@refill

@end table

@end table

@node widget-radio-frame, widget-labeled-text, widget-frame, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-radio-frame
@cwindex widget-radio-frame

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item @w{@xref{widget-group}}
@table @code
@item @w{@xref{widget-frame}}
@table @code
@item widget-radio-frame
No children
@end table

@end table

@end table

@end table

@end table

@end table
@end table

  Special frame class which behaves as a radio box.  Designed to only
contain widgets of type @code{widget-radio-button} @xref{widget-radio-button}.

@table @asis
@item Public Slots:

@table @code
@item :state
Default Value: @code{0}

Current index of the selected radio button
@refill

@end table

@end table

@node widget-labeled-text, widget-label, widget-radio-frame, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-labeled-text
@cwindex widget-labeled-text

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item @w{@xref{widget-group}}
@table @code
@item widget-labeled-text
No children
@end table

@end table

@end table

@end table

@end table
@end table

  Special group widget which makes creating text fields with labels next to
them more convenient.

@table @asis
@item Public Slots:

@table @code
@item :handle-io
Default Value: @code{t}

@xref{widget-group}
@item :label
Default Value: @code{nil}

Text object displayed with a @code{widget-label} @xref{widget-label} before a @code{widget-text-field} @xref{widget-text-field}.
@refill

@item :unit
Default Value: @code{nil}

Text object displayed with a @code{widget-label} @xref{widget-label} after the @code{widget-text-field} @xref{widget-text-field}
which represents some sort of typing which would be useful to know.
@refill

@item :value
Default Value: @code{nil}

The @code{data-object} @xref{data-object} we are going to edit with the text widget
@refill

@item :text-length
Default Value: @code{20}

The width passed to the @code{widget-text-field} @xref{widget-text-field}
@refill

@end table

@end table

@node widget-label, widget-button, widget-labeled-text, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-label
@cwindex widget-label

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item widget-label
@table @asis
@item Children:
@w{@xref{widget-button}}
@end table

@end table

@end table

@end table

@end table
@end table

  Class for displaying labels.  The value of the label is determined
by the @code{data-object} @xref{data-object} stored in @code{label-value} which can be initialized
with a string, number, or other lisp object.  Supports strings with
carriage returns in them.

@table @asis
@item Public Slots:

@table @code
@item :label-value
Default Value: @code{nil}

The @code{data-object} @xref{data-object} to display on ourselves
@refill

@item :justification
Default Value: @code{center}

how to justify the text.  Valid values are @code{'left}, @code{'center}, @code{'right}
@refill

@item :leftmargin
Default Value: @code{0}

Size of left space to format around
@refill

@item :rightmargin
Default Value: @code{0}

Size of right space to format around
@refill

@item :topmargin
Default Value: @code{0}

Size of space above this label to format around
@refill

@item :bottommargin
Default Value: @code{0}

Size of space below this label to format around.
@refill

@end table

@item Private Slots:

@table @code
@item :focus-face
Default Value: @code{nil}

Face used when mouse passes over @code{label-value}
@refill

@end table

@end table

@node widget-button, widget-push-button, widget-label, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-button
@cwindex widget-button

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item @w{@xref{widget-label}}
@table @code
@item widget-button
@table @asis
@item Children:
@w{@xref{widget-push-button}}, @w{@xref{widget-option-button}}, @w{@xref{widget-toggle-button}}
@end table

@end table

@end table

@end table

@end table

@end table
@end table

  Class for a button widget.  This is the starting point for all
interactive buttons.  This button will be CLICKED on, or will have RET
or SPC pressed while selected, and it will then call @code{activate-hook}.
If a push button is desired, it is better to use a widget of type
@code{widget-push-button} @xref{widget-push-button} instead as it has a better visual effects.

@table @asis
@item Public Slots:

@table @code
@item :handle-io
Default Value: @code{t}

@xref{widget-label}
@item :activate-hook
Default Value: @code{nil}

Function to call when a user clicks this button
@refill

@item :help-hook
Default Value: @code{nil}

Function to call when help is requested
about this button.  Default value is to display instructions about the
operation of this widget in the minibuffer.
@refill

@end table

@item Private Slots:

@table @code
@item :focus-face
Default Value: @code{nil}

@xref{widget-label}
@item :arm-face
Default Value: @code{nil}

Face used when this button has been pushed.
@refill

@end table

@end table

@node widget-push-button, widget-option-button, widget-button, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-push-button
@cwindex widget-push-button

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item @w{@xref{widget-label}}
@table @code
@item @w{@xref{widget-button}}
@table @code
@item widget-push-button
No children
@end table

@end table

@end table

@end table

@end table

@end table
@end table

  Class for a push button.  This button behaves as a @code{widget-button} @xref{widget-button}
but with a different visual effect.  This is the preferred widget to
use as the @code{widget-button} @xref{widget-button} is used as a starting point for all button
types.

@table @asis
@item Public Slots:

@table @code
@item :boxed
Default Value: @code{t}

@xref{widget-button}
@item :box-sides
Default Value: @code{[t t nil nil]}

@xref{widget-button}
@item :leftmargin
Default Value: @code{1}

@xref{widget-button}
@item :rightmargin
Default Value: @code{1}

@xref{widget-button}
@end table

@item Private Slots:

@table @code
@item :box-face
Default Value: @code{nil}

@xref{widget-button}
@item :box-char
Default Value: @code{nil}

@xref{widget-button}
@end table

@end table

@node widget-option-button, widget-toggle-button, widget-push-button, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-option-button
@cwindex widget-option-button

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item @w{@xref{widget-label}}
@table @code
@item @w{@xref{widget-button}}
@table @code
@item widget-option-button
No children
@end table

@end table

@end table

@end table

@end table

@end table
@end table

  Class for option button widget.  This button will provide a menu
when clicked on.  The menu will consist of those items in
@code{option-list}, and the chosen item will appear in the button's text.

@table @asis
@item Public Slots:

@table @code
@item :justification
Default Value: @code{left}

@xref{widget-button}
@item :option-indicator
Default Value: @code{"<=>"}

String printed to the left of the label in @code{left-margin} used to show this is an option button.
@refill

@item :option-list
Default Value: @code{nil}

List of strings which are the options
@refill

@item :state
Default Value: @code{0}

@code{data-object} @xref{data-object} used as a numerical index into
list of strings representing the current value.
@refill

@end table

@item Private Slots:

@table @code
@item :ind-face
Default Value: @code{nil}

Face used on the @code{option-indicator} string
@refill

@end table

@end table

@node widget-toggle-button, widget-radio-button, widget-option-button, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-toggle-button
@cwindex widget-toggle-button

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item @w{@xref{widget-label}}
@table @code
@item @w{@xref{widget-button}}
@table @code
@item widget-toggle-button
@table @asis
@item Children:
@w{@xref{widget-radio-button}}
@end table

@end table

@end table

@end table

@end table

@end table

@end table
@end table

  Class for toggle button widget.  This button will be CLICKED, and
when successful clicks occur, a boolean value will be turned ON or
OFF, and a visible piece will be modified based on @code{showvec}.

@table @asis
@item Public Slots:

@table @code
@item :state
Default Value: @code{nil}

Current value of the toggle button
@refill

@item :showvec
Default Value: @code{["[ ]" "[X]"]}

Vector @code{[ false true ]} of strings used to show the state
@refill

@end table

@item Private Slots:

@table @code
@item :ind-face
Default Value: @code{nil}

Face used on toggle indicator
@refill

@end table

@end table

@node widget-radio-button, widget-scale, widget-toggle-button, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-radio-button
@cwindex widget-radio-button

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item @w{@xref{widget-label}}
@table @code
@item @w{@xref{widget-button}}
@table @code
@item @w{@xref{widget-toggle-button}}
@table @code
@item widget-radio-button
No children
@end table

@end table

@end table

@end table

@end table

@end table

@end table
@end table

  Subclass of @code{widget-toggle-button} @xref{widget-toggle-button} which knows how to talk with
several other instantiations of itself in order to radio between different
values.

@table @asis
@item Public Slots:

@table @code
@item :showvec
Default Value: @code{["< >" "<O>"]}

@xref{widget-toggle-button}
@item :radioindex
Default Value: @code{0}

Index indexing the parent's state, which then lets us know if we
are toggled on or off.  ie, if the parent's state is 1, and our index
is 0, then the state of this button will become nil.  This value does
not change during use.
@refill

@end table

@end table

@node widget-scale, widget-scrollbar, widget-radio-button, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-scale
@cwindex widget-scale

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item widget-scale
@table @asis
@item Children:
@w{@xref{widget-scrollbar}}
@end table

@end table

@end table

@end table

@end table
@end table

  Not Implemented Completely Yet.

Class of scale.  A scale is merely a thumb marker displaying the current
value of some number graphically across some random number of text 
characters.

@table @asis
@item Public Slots:

@table @code
@item :handle-io
Default Value: @code{t}

@xref{widget-square}
@item :boxed
Default Value: @code{t}

@xref{widget-square}
@item :state
Default Value: @code{0}

Current value of this scale
@refill

@item :minimum
Default Value: @code{0}

Smallest allowed value
@refill

@item :maximum
Default Value: @code{10}

Largest allowed value
@refill

@item :direction
Default Value: @code{(quote horizontal)}

Direction to draw the scale
@refill

@item :end-buttons
Default Value: @code{nil}

Text used to inc/dec this scale
@refill

@end table

@end table

@node widget-scrollbar, widget-text-field, widget-scale, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-scrollbar
@cwindex widget-scrollbar

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item @w{@xref{widget-scale}}
@table @code
@item widget-scrollbar
No children
@end table

@end table

@end table

@end table

@end table
@end table

  Not Implemented Completely Yet.

Class for a scrollbar.  A scrollbar also will have a visual range
where the thumbtack changes size based on RANGE.

@table @asis
@item Public Slots:

@table @code
@item :end-buttons
Default Value: @code{[["<" ">"] ["/\\" "\\/"]]}

@xref{widget-scale}
@item :range
Default Value: @code{10}

Range of currently viewable area
@refill

@end table

@end table

@node widget-text-field,  , widget-scrollbar, Widget Classes
@comment  node-name,  next,  previous,  up
@section widget-text-field
@cwindex widget-text-field

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{widget-core}}
@table @code
@item @w{@xref{widget-visual}}
@table @code
@item @w{@xref{widget-square}}
@table @code
@item widget-text-field
No children
@end table

@end table

@end table

@end table
@end table

  Class for a text field widget.  This will accept user-typed text
which is no more than 1 line high.  Extra text will not be printed,
but characters on either side of the field will display `<' or `>' to
indicate that there is more to see outside of the visible part.

@table @asis
@item Public Slots:

@table @code
@item :handle-io
Default Value: @code{t}

@xref{widget-square}
@item :height
Default Value: @code{1}

@xref{widget-square}
@item :keymap
Default Value: @code{nil}

Keymap used to interpret text.  By default, the
global map is used when this value is nil.  Otherwise, additional
mode-specific keymaps could be substituted to lend additional
behaviors.
@refill

@item :value
Default Value: @code{nil}

A @code{data-object} @xref{data-object} representing the string we are editing.
@refill

@end table

@item Private Slots:

@table @code
@item :face
Default Value: @code{nil}

@xref{widget-square}
@item :spface
Default Value: @code{nil}

Face used on text buttons which appear to the
left and right of the editable text.  They indicate unseen text to the
left or right of the field.
@refill

@item :focus-face
Default Value: @code{nil}

Not Documented
@refill

@end table

@end table
