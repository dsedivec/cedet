\input texinfo   @c -*-texinfo-*-
@c
@c $Id$
@c
@setfilename eieio.info
@settitle Enhanced Implementation of Emacs Interpreted Objects

@ifinfo
@format
START-INFO-DIR-ENTRY
* eieio: (eieio).       Objects for Emacs
END-INFO-DIR-ENTRY
@end format
@end ifinfo

@titlepage
@sp 10
@center @titlefont{eieio}
@vskip 0pt plus 1 fill
Copyright @copyright{} 1995,1996 Eric M. Ludlam
@end titlepage


@node Top, , , (dir)Top
@comment  node-name,  next,  previous,  up

EIEIO is an attempt to create a framework for writing object oriented
code for emacs lisp, and is a result of my taking various object
oriented classes at work and my attempt to understand some of it better
by implementing it.  The real reason I started eieio is because someone
in one of my classes said "I bet emacs can't do that!".  Well then, I
just had to prove them wrong!

EIEIO was not compatible to the Common List Object System (CLOS),
however, due to popular demand, it is beginning to conform to several
aspects of CLOS.

@menu
* Introduction::          Why use eieio?  Basic overview, samples list.
* CLOS compatibility::    What are the differences?
* Building Classes::      How to write out new class structures.
* Default Superclass::    The grand-daddy of all superclasses.
* Making New Objects::    How to construct new objects.
* Accessing Fields::      How to access a field.
* Writing Methods::       How to write a CLOS style method.
* Writing Methods::       How to write an embedded class method.
* Predicates::            Class-p, Object-p, etc-p.
* Signals::               When you make errors
* Browsing::              Browsing your class lists.
* Class Values::          Displaying information about a class or object.
* Documentation::         Automatically creating texinfo documentation
* Demo Programs::         Some examples using eieio.
@end menu

As of this writing, updates can be found at:
  ftp://ftp.ultranet.com/pub/zappo

@node Introduction, CLOS compatibility, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Introduction

  One thing emacs lisp does not support is structured data organization,
and restricted function access.  As a programmer it's easy to break up a
program into modules, and say "I won't access function or variable XYZ
anywhere but here", but it's not protected from other programmers doing
an apropos and thinking "Hey, this is a useful function and I will use
it".  Then a program is upgraded, and the second programmer is unhappy.

  This happened to me when keymaps changed from 18 to 19 because I
didn't restrict myself to only using the keymap access functions when
writing etalk.  I am not suggesting all of emacs follow this paradigm,
(Hey.. theres one of those OBJECT words!) only mentioning the type of
stuff they talk about in my classes.

  I've recently attempted to make eieio CLOS compatible (Common Lisp
Object System).  This compatibility is only at a fairly basic level.

@section What EIEIO supports

@enumerate
@item
A structured framework for creation of basic classes with public and
private attributes and methods with singular inheritance similar to CLOS
but only representing a small subset.
@item
Method definitions similar to CLOS, in addition to class embeded method
which does not appear of CLOS.
@item
Simple class browser.
@item
Edebug support.
@end enumerate

@section What EIEIO doesn't support

@table @asis
@item Multiple inheritance
We could say EIEIO is still in the Fungus stages of development as a
class can have but one parent.
@end table

@section EIEIO example programs that are almost useful.

@table @asis
@item tree
Draw a structured tree by building a series of embeded lists of
`tree-node' class objects.  Includes the functions `eieio-class-tree' to
browse your current eieio inheritance structure
@item java-tree
Use tree mode to create an inheritance tree for all classes in a java
source directory.
@item call-tree
Pass it an elisp function (not byte compiled) to generate a call tree
using the tree tool
@item chart
Uses eieio to manage charts/axis/sequences, and allows display of simple
bar-charts.  Example programs are available displaying emacs memory
usage and list occupation, in addition to file counts and size charts.
Theres even a sample that will display a chart of who sends you the most
email!  See doc-string for `chart-bar-quickie' to make your own bar
charts easilly.
@item dbif
Simple superclass to maintain a database connection, and return results.
Can be used to get the results of SQL queries in simple lists.
@item dbif-browse
Uses dbif to display a simple browser.
@item psql
Subclass of dbif which implements an interface to the POSTGRES95
database.
@item dialog, widget-i, widget-d
A simple widgeting system providing dialog buffers, labels, buttons,
toggles, frames, and text fields.  Needs work, but is still pretty
useful.
@item dialog-tree
Draw a tree of widgets in a dialog box.
@end table

@section EIEIO wish list

@enumerate
@item
More CLOS compatibility.
@item
Get edebug to correctly debug a defclassmethod and defmethod.  Currently
debugging works, but you have to step through the creation of the method
definition first.
@item
More built-in class-methods similar to 'constructor and 'destructor,
like 'print-construct, 'print, 'save, and 'load with defaults performing
basic structural storage, which can be over-loaded to read/write
anything in any format.  I have not done this because the more methods
added, the slower things get at run time. (See 2) It might be worthwhile
to add these methods in as CLOS methods which would be much faster.
@item
Integrate in the desired built-in methods into the object browser.
@item
Create some objects over pre-existing emacs-lisp stuff for fun, like
faces, processes, buffers, frames and windows as examples.
@end enumerate

@node CLOS compatibility, Building Classes, Introduction, Top
@comment  node-name,  next,  previous,  up
@chapter CLOS compatibility

As I write this, it is important to know that I have just recently
learned some of the CLOS syntax, but have never used it myself.  I'm
primarilly and emacs-lisp hacker who wrote eieio to help myself learn
some of the mechanics of Object Oriented programming.

Currently, the following functions should behave as expected from CLOS,
or are mostly compatible.

@table @asis
@item defclass
Only a subset of slot keywords are avaliable (see below), and only
single inheritance is currently supported
@item make-instance
Make instance works as expected, however it just uses the EIEIO instance
creator automatically created when a new class is generated.
@xref{Making New Objects}
@item slot-value
Accesses the value of a named slot within an object
@item defgeneric
Creates the desired symbol, and accepts most of the expected arguments
@item defmethod
Calls defgeneric, and accepts most of the expected arguments.  Only the
first argument to the created method may be typecast, though any
argument can be syntactically typecast.  (And promptly ignored)  To
typecast against a class, the class must exist before defmethod is called.
@item call-next-method
Inside a method, calls the next available method up the inheritance tree
for the given object.  This is different than that found in CLOS because
in eieio this function accepts replacement arguments.  This permits
subclasses to modify arguments as they are passed up the tree.
@end table

Some top-level CLOS functions which I am aware of but are not yet
defined in EIEIO which are defined in CLOS.

@table @asis
@item describe
Pretty print an object.  Can be found as @code{eieio-describe-class} for a
bufferized version.
@end table

When creating a new class @xref{Building Classes} there are several
keywords supported by EIEIO.

In EIEIO tags are in lower case, not mixed case.

CLOS keywords supported by EIEIO's defclass:

@table @asis
@item :initform
The initial value of an attribute
@item :initarg
A tag used in @code{make-instance} to assign a value to a field.
@item :accessor
A tag used to create a function which returns the value of the defined
slot
@item :docstring
Documentation which is mixed in with the variable documentation for the
class.
@end table

EIEIO defclass keywords not in CLOS
@table @asis
@item :protection
Can be @code{private} or something else.  If it is set to private, then
this field cannot be accessed via normal EIEIO means @code{oref}, and
@code{oset}..  These fields will then only be accessable to methods
running from this object.  This is determined if you define a method
@xref{Writing Methods} where the object paramater name is @code{this}.
@end table

Any tags not understood are summarily ignored (in addition to it's parameter)

@node Building Classes, Default Superclass, CLOS compatibility, Top
@comment  node-name,  next,  previous,  up
@chapter Building Classes

A class in EIEIO has a similar structure to that found in other
languages, but there is currently no typing support.  A new class is
created with @code{defclass}

@defun defclass class-name superclass-list field-list doc-string

The format for this defun is specified by CLOS, and EIEIO conforms in
structure.

Creates a new class called @code{class-name} The created variable's
documentation string is set to a modified version of @var{doc-string}.
Each time a method is defined the variables documentation string is
updated to include the methods documentation as well. (internal methods
are not attached to their own symbols)

The parent class for @code{class-name} must be a list, however, at this
time, only the first element of that list is used.  In the future,
multiple inheritance will be supported.

The field list is a list of lists.  Each sublist defines an attribute,
or a method.  (Methods are not supported by CLOS).  These lists are of
the form @code{(name :tag1 value1 :tag2 value2 :tagn valuen)}.  Some
valid tags are:

@table @asis
@item :initarg
@item :initform
@item :accessor
@item :docstring
@item :protection
@end table

@xref{CLOS compatibility} for more details on CLOS tags versus EIEIO
specific tags.

The whole definition may look like this.
@example
(defclass bird (animal)
   ((color :initarg :color
           :accessor get-color
           :initform "white"
           :docstring "The color of the bird most of the time")
    (gender :initarg :gender
            :initform male
            :protection private)
   "A pleasant documentation string"))
@end example

@end defun

@node Default Superclass, Making New Objects, Building Classes, Top
@comment  node-name,  next,  previous,  up
@chapter Default Superclass

All defined classes, if created as a superclass (With no specified
parent class) will actually inherit from a special superclass stored in
@code{eieio-default-superclass}.  This superclass is actually quite
simple, but with it, certain default methods or attributes can be added
to all objects at any time, without updating their code in the future
(If there is a change).  In CLOS, this would be named
@code{STANDARD-OBJECT} an may be aliased in the future.

Currently, the default superclass is defined as follows:

@example
(defclass eieio-default-superclass nil
  nil
  )
 "Default class used as parent class for superclasses.  It's
fields are automatically adopted by such superclasses but not stored
in the `parent' field.  When searching for attributes or methods, when
the last parent is found, the search will recurse to this class.")

(defmethod constructor ((this eieio-default-superclass) &optional fields)
    "Constructor for filling in attributes when constructing a new
class."
    (eieio-set-defaults this t)
    (eieio-set-fields this fields)
    )

(defmethod destructor ((this eieio-default-superclass) &rest params)
  "Destructor for cleaning up any dynamic links to our object."
  )

(defmethod object-print ((this eieio-default-superclass) &optional strings)
  "Pretty priniter.  The default method for printing an object is to use
the `object-name' function.  At times it could be useful to put a summary of
the object into the default #<notation> string.  Overload this function to
allow summaries of your objects to be used by eieio browsing tools.  The
optional parameter STRINGS is for additional summary parts to put into the
name string.  When passint in extra strings from child classes, always
remember  to prepend a space."
  (object-name this (apply 'concat strings)))
@end example

The @code{constructor} method is always called with the parameter
@var{fields} from any classes' @code{constructor} function.  The default
method assigns elements from this list into the fields of the current
object (Even though they are not defined by the default class. Cool
huh?)  If you want something to happen every time an object of your
class is created, set this method to something for your object, and make
the very first line be: @code{(call-next-method)}.  Thus you can get
it's functionality, plus be able to add your own.  Make sure your method
takes a @var{fields} parameter. @xref{CLOS compatibility} for info about
@code{call-next-method}

Currently @code{destructor} does nothing, and is never called.  I haven't
quite figured out what to do with it yet.

The @code{object-print} function is used by functions in
@file{eieio-opt.el} to display objects with small summaries.  It is
useful to use the @code{replacement-args} parameter to
@code{call-next-method} when overloading @code{object-print}.  For
instance, the code:

@example
(defun object-print ((this my-class) &rest strings)
  "Printer for my-class"
  (apply 'call-next-method this
         (cons (format " number: %d" (oref this number)) strings)))
@end example

@noindent
will generate the object's name with the number member of the object
specified in the name like this:
@example
#<my-class obj number: 3>
@end example

Eventually it might be nice to have a @code{print} and a @code{write}
and a @var{read} method so all objects could print themselves (like a
name) write themselves (store on disk) and read themselves, but that is
a task for later.

@node Making New Objects, Accessing Fields, Default Superclass, Top
@comment  node-name,  next,  previous,  up
@chapter Making New Objects

Once we have defined our classes, it's time to create objects with the
specified structure.  After we call @code{defclass} two new functions
are created, on of which is @code{classname}.  Thus, from the example at
the end of the previous chapter @xref{Building Classes}, we would have
the functions @code{animal} and @code{bird}.

@defun classname object-name &rest fields

This creates and returns a new object.  This object is not assigned to
anything, and will be garbage collected if not saved.  This object will
be given the string name @var{object-name}.  There can be multiple
objects of the same name, but the name field provides a handy way to
keep track of your objects.  @var{fields} is just all the fields you
wish to preset.  Any field set as such WILL NOT get it's default value,
and any side effects from an attributes default function will not occur.
An example pair would appear simply as @code{:gender mail}.  Of course
you can do any valid lispy thing you want with it, such as @code{:gender
(if full-moon female male))}

Example of creating an object from a class in @xref{Building Classes}:

@example
(setq mybird (bird
              "Owl"                ; name
              :gender 'male)       ; gender value

@end example

@end defun

@node Accessing Fields, Writing Methods, Making New Objects, Top
@comment  node-name,  next,  previous,  up
@chapter Accessing Fields

There are several ways to access field values in an object.  The naming
convention and argument order is similar to that found in elisp for
referencing vectors.  The basics for referencing, setting, and calling
methods are all accounted for.

@defun oset object field value

This sets the value behind @var{field} to @var{value} in @var{object}.
Currently, no type checking is performed, and value can be any lisp
object.  @code{oset} returns @var{value}.  Oset is a macro which does
calculations at evaluation time.  If the class structure changes, then
all functions which call oset on that class must be re-evaluated.

@end defun

@defun oset-default class field value

This sets the slot @var{field} in @var{class} which is initialized with
the @code{:initform} tag to @var{value}.  This will allow a user to set
both public and private defaults after the class has been constructed.
This functions is pretty intrusive, and is offered as a way to allow
users to configure the default behavior of packages built with classes
more easilly.

@end defun

@defun oref object field

This recalls the value behind @var{field} in @var{object} and returns
it.  Oref is a macro which does calculations at evaluation time.  If the
class structure changes, then all functions which call oref on that
class must be re-evaluated.

@end defun

@defun oref-default object field

This gets the default value in @var{object}'s class definition for
@code{field}.  This can be different from the value returned by
@code{oref}.  @var{object} can also be a class symbol.

@end defun

@defun slot-value object field

This function is mearly an alias for oref

@end defun

If the value behind @var{field} is a private, then the current scope of
operation must be within a method of the calling object.  The scope is
tracked with the variable @code{this}.  You can set the field
@code{this} by making it the name of your object passed into your
methods.  It is not necessary to name your object @code{this}, or to use
private fields.  It's not CLOS compatible, but I find it useful.

@node Writing Methods, Predicates, Accessing Fields, Top
@comment  node-name,  next,  previous,  up
@chapter Writing Methods

Writing a CLOS style method is similar to writing a function, except
some extra options are made available, and there can be multiple
implementations of a single method which interact interestingly with
each other.

Each method created verifies that there is a @dfn{generic method}
available to attach to.  A generic method has no body, and is mearly a
symbol upon which methods are attached.

@defun defgeneric method arglist [doc-string]

@var{method} is the symbol to turn into a function.
@var{arglist} is the default list of arguments to use (not implemented yet)
@var{doc-string} is the documentation used for this symbol

A generic function acts as a place holder for methods.  There is no need
to call defgeneric yourself, as defmethod will call it if necessary.
Currently the argument list is unused.

The function part of a created generic function creates a couple local
variables and then calls @code{eieio-generic-call}.  This is the engine
that makes sure that different method implementations are called in the
correct order.

@code{defgeneric} will prevent you from turning an existing emacs lisp
function into a generic function.
@end defun

@defun defmethod method [:BEFORE | :AFTER] arglist [doc-string] forms

@var{method} is the name of the function to be created.

@var{:BEFORE | :AFTER} represent when this form is to be called.  
If neither of these symbols are present, then the default priority is
before :AFTER and after :BEFORE.

@code{arglist} is the argument list.  Unlike CLOS, only the FIRST
argument may be type-cast, and it may only be type-cast to an eieio
object.  An arglist such as @code{(a b)} would classify the function as
generic call, which has no object it can talk to (none is passed in) and
mearly allows the creation of side-effects.  If the arglist appears as
@code{((mt MyType) b)} then the form is stored as belonging to the class
@code{MyType}.  If two @code{defmethods} appear with arglists such as
@code{(a b)} and @code{(c d)} then one of the implementations will be
overwritten, but generic and multiple type cast arglists can co-exist.

When called, if there is a method cast against the objects parent class,
but not for that objects class, the parents method will be called,
however, if there is a method defined for both, only the child's method
is called.

@var{doc-string} is the doc string attached to the implementation.  It
currently does not appear under an apropos.

@var{forms} is the body of the function.

@end defun

@defun call-next-method

While running insided a CLOS method, calling this function will call the
method associated with the parent of the class of the currently running
method with the same parameters.

Optional arguments REPLACEMENT-ARGS can be used to replace the arguments
the next method would be called with.  Useful if a child class wishes to
add additional behaviours through the modification of the parameters.

Here is an example line if @code{this} represents the object currently
having it's method evaluated:

@example
(call-next-method this '(1 2 3))
@end example

@noindent
@code{this} must be specified, otherwise the next method called will
fail.  If no args are specified then the args that called the current
method will be used.

@end defun

In this implementation, not all features of CLOS exist.

@enumerate
@item
There is currently no :AROUND tag.
@item
CLOS allows multiple sets of type-cast arguments, where eieio only
allows the first argument to be cast.
@end enumerate

@node Predicates, Signals, Writing Methods, Top
@comment  node-name,  next,  previous,  up
@chapter Predicates and Utilities

Now that we know how to create classes, access fields, and define
methods, it might be useful to verify that everything is doing ok.  To
help with this a plethora of predicates have been created.

@defun class-v class
Return a vector with all the class's important parts in it.  This vector
is not a copy.  Changing this vector changes the class.
@end defun

@defun class-p class
Return @code{t} if @var{class} is a class type.
@end defun

@defun object-p obj
Return @code{t} if @var{obj} is an object.
@end defun

@defun class-name class
Return a string of the form #<class myclassname> which should look
similar to other lisp objects like buffers and processes.  Printing a
class results in an ugly vector.
@end defun

@defun class-constructor class
Return a symbol used as a constructor for @var{class}.  This way you can
make an object of a passed in class without knowing what it is.
@end defun

@defun object-name obj
Return a string of the form #<object-class myobjname> for @var{obj}.
This should look like lisp symbols from other parts of emacs such as
buffers and processes, and is shorter and cleaner than printing the
whole object.
@end defun

@defun object-class obj
Returns the class vector from @var{obj}.
@end defun

@defun object-class-name obj
Returns the symbol of @var{obj}'s class.
@end defun

@defun class-parent class
Returns the direct parent class of @var{class}.  Returns @code{nil} if
it is a superclass.
@end defun

@defun same-class-p obj class
Returns @code{t} if @var{obj}'s class is the same as @var{class}.
@end defun

@defun obj-of-class-p obj class
Returns @code{t} if @var{obj} inherits anything from @var{class}.  This
is different from @code{same-class-p} because it checks for inheritance.
@end defun

@defun child-of-class-p child class
Returns @code{t} if @var{child} is a subclass of @var{class}.
@end defun

@defun generic-p method-symbol
Returns @code{t} if @code{method-symbol} is a generic function, as
opposed to a regular emacs list function.
@end defun

It is also important to note, that for every created class, a predicate
is created for it.  Thus in our example, the function @code{animal-p}
and @code{bird-p} are created, and return @code{t} if passed an object
of the appropriate type.

@defun eieio-build-class-alist &optional base-class
Returns an alist of all currently defined classes.  This alist is
suitable for completion lists used by interactive functions to select a
class.  The optional argument base-class allows the programmer to select
only a subset of classes to choose from should it prove necessary.
@end defun


@node Signals, Browsing, Predicates, Top
@comment  node-name,  next,  previous,  up
@chapter Signals

There are new signal types that can be caught when using eieio.

@deffn Signal invalid-slot-name obj-or-class field
This signal is called when an attempt to reference a slot in an
@var{obj-or-class} is made, and the @var{field} is not defined for
it.
@end deffn

@deffn Signal no-method-definition method arguments
This signal is called when @var{method} is called, with @var{arguments}
and nothing is resolved.  This occurs when @var{method} has been
defined, but the arguments make it impossible for eieio to determine
which method body to run.
@end deffn

@node Browsing, Class Values, Signals, Top
@comment  node-name,  next,  previous,  up
@chapter Browsing class trees

To browse all the currently loaded classes in emacs, simply run the
EIEIO browser.  @kbd{M-x eieio-browse}.  This browses all the way from
the default super-duper class eieio-default-superclass, and lists all
children in an indented tree structure.

To browse only from a specific class, pass it in as a alternate
parameter.

Here is a sample tree from our current example:

@example
eieio-default-superclass
  +--animal
       +--bird
@end example

Note that we start with eieio-default-superclass.  @xref{Default Superclass}

Here is the tree after our example, and after the self-managing
text-based widget library I am playing with has been loaded.

@example
eieio-default-superclass
  +--animal
  |    +--bird
  +--widget-core
  |    +--widget-visual
  |    |    +--widget-square
  |    |         +--widget-text-field
  |    |         +--widget-scale
  |    |         |    +--widget-scrollbar
  |    |         +--widget-label
  |    |         |    +--widget-button
  |    |         |         +--widget-toggle-button
  |    |         |         |    +--widget-radio-button
  |    |         |         +--widget-option-button
  |    |         |         |    +--widget-option-button-dlg-font-style
  |    |         |         +--widget-push-button
  |    |         +--widget-group
  |    |              +--widget-labeled-text
  |    |              +--widget-frame
  |    |              |    +--widget-radio-frame
  |    |              +--widget-toplevel
  |    +--widget-gadget-translator
  +--data-object
       +--data-face-object
       |    +--data-face-emphasis-object
       |    +--data-face-underline-object
       |    +--data-face-background-object
       |    +--data-face-foreground-object
       +--data-object-command-option
       +--data-object-symbol
            +--data-object-symbol-disabled
            +--data-object-symbol-hook
            +--data-object-symbol-feature
            +--data-object-symbol-default
            +--data-object-symbol-lisp-expression
            +--data-object-symbol-list-index
            +--data-object-symbol-string-to-int
@end example

As you can see, it is possible to create quite large and complex trees
of classes.  

Note: new classes are consed into the inheritance lists, so the tree
comes out upside-down.

It is also possible to use the function @code{eieio-class-tree} in the
@file{tree.el} package.  This will create an interactive tree.  Clicking
on nodes will allow expansion/contraction of branches, or editing of a
class.  @xref{Class Values}

@node Class Values, Documentation, Browsing, Top
@comment  node-name,  next,  previous,  up
@chapter Class Values

Details about any class or object can be retrieved using the function
@code{eieio-describe-class} function.  Interactivly, type in the name of
a class.  In a program, pass it a string with the name of a class, a
class symbol, or an object.  The resulting buffer will display all field
names and their default values.  For objects, and additional column
representing current value of that field is also displayed.

The display is broken into two sections.  Private parts and public
parts.  Faces are used when available.  If the function
`eieio-class-tree' is used (from tree.el) then choosing the edit
function on a node calls this function.  This function is also useful
when used with edebug while attempting to determine what is wrong with
method.

@node Documentation, Demo Programs, Class Values, Top
@comment  node-name,  next,  previous,  up
@chapter Documentation

It is possible to automatically create documentation for your classes in
texinfo format by using the tools in the file @file{eieio-doc.el}

@deffn Command eieiodoc-class class indexstring &optional skiplist

This will start at point, and created an indented menu of all the child
classes of, and including @var{class}, but skipping any classes that
might be in @var{skiplist} It will then create nodes for all these
classes, subsection headings, and indexes.

Each class will be indexed using the texinfo labeled index
@var{indexstring} which is a two letter description.
@xref{(texinfo) New Indices}

To use this command, the texinfo macro

@example
@@defindex @@var @{ indexstring @}
@end example

@noindent
where @var{indexstring} is replaced with the two letter code.

Next, an inheritance tree will be created listing all parents of that
section's class.

Then,all the slots will be expanded in tables, and described
using the documentation strings from the code.  Default values will also
be displayed.  Only those slots with @code{:initarg} specified will be
expanded, others will be hidden.  If a slot is inherited from a parent,
that slot will also be skipped unless the default value is different.
It there is a change, then the documentation part of the slot will be
replace with an @@xref back to the parent.

@end deffn

@node Demo Programs, , Documentation, Top
@comment  node-name,  next,  previous,  up
@chapter Demo Programs

There are many sample programs I have written for eieio which could
become useful componants of other applications, or are good stand alone
programs providing some useful functionality.  The file, and
functionality of these appear below:

@table @code
@item widget-d widget-i dialog
These files provide widget definitions and functionality.  Dialog mode
provides the functional interface to creating a dialog box, and several
convenience functions for creating widgets in those dialog buffers.
@item dlg-config dlg-class e-config
This file provides another layer on dialog mode, plus some new widgets.
These widgets are designed specifically for modifying configurations in
a running emacs, and modifying the corresponding .emacs file for
variable values.  It also provides fancy face editing, which modifies
the corresponding .Xdefaults file.
@item tree
Maintains and displays a tree structure in a buffer.  Nodes in the tree
can be clicked on for editing, node expansion, and simple information.
Includes a sample program for showing directory trees, and to draw trees
of the eieio class structures.
@item dialog-tree
Uses tree mode to display the parent/child relationship of widgets in a
dialog box.
@item call-tree
Parses a non-byte-compiled function, and generates a call tree from it,
and all sub-non-byte-compiled functions.  Provides protection from
recursive functions.
@item chart
Draw bar charts from data.  Examples include displaying sizes of emacs
values, file distribution, and rmail distributions.
@end table


@bye
